# Generated by Django 4.0.6 on 2022-07-30 12:55

import ankisocial.core.models.user
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Please enter the name you wish to be displayed publicly. You can always change it later.",
                        max_length=120,
                        verbose_name="Name",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Your email address will only be used to identify you when you log in, and to send you password reset emails when you request them.",
                        max_length=254,
                        unique=True,
                        verbose_name="E-mail",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Inactive users are not allowed to log in.",
                    ),
                ),
                ("is_staff", models.BooleanField(default=False)),
                ("is_superuser", models.BooleanField(default=False)),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        help_text="If possible, upload an image that is least 120 pixels wide.",
                        null=True,
                        upload_to=ankisocial.core.models.user.avatar_path,
                        verbose_name="Profile picture",
                    ),
                ),
                (
                    "pw_reset_token",
                    models.CharField(
                        max_length=160, null=True, verbose_name="Password reset token"
                    ),
                ),
                (
                    "pw_reset_time",
                    models.DateTimeField(null=True, verbose_name="Password reset time"),
                ),
                (
                    "locked",
                    models.BooleanField(
                        default=False,
                        help_text="Posts by locked accounts will only be visible to their followers, and you can approve follow requests first.",
                        verbose_name="Lock account",
                    ),
                ),
                (
                    "app_token",
                    models.CharField(
                        help_text="The secret token used by scripts and apps to post. Resetting it generates a new token, and the old token won't work anymore.",
                        max_length=160,
                        null=True,
                        verbose_name="App token",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(ankisocial.core.models.user.FileCleanupMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Post",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "post_type",
                    models.CharField(
                        choices=[
                            ("text", "Text"),
                            ("streak", "Streak"),
                            ("day", "Day Summary"),
                            ("day_cards", "Day Cards"),
                            ("day_duration", "Dax Duration"),
                        ],
                        max_length=15,
                    ),
                ),
                ("achievement", models.BooleanField(default=False)),
                ("content_date", models.DateField()),
                ("content_time_range", models.PositiveIntegerField(default=1)),
                ("data", models.JSONField()),
                (
                    "comment",
                    models.TextField(
                        blank=True,
                        help_text="Without a comment, your post will still show your stats and your achievements.",
                        null=True,
                        verbose_name="Comment",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="posts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ("-timestamp",),
            },
        ),
        migrations.CreateModel(
            name="Score",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("score", models.PositiveIntegerField()),
                ("date", models.DateField()),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="scores",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Reaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "reaction_type",
                    models.CharField(
                        choices=[
                            ("whee", "Whee"),
                            ("party", "Party"),
                            ("cool", "Cool"),
                        ],
                        default="whee",
                        max_length=10,
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reactions",
                        to="core.post",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reactions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ActivityLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("object_id", models.PositiveIntegerField(db_index=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("action_type", models.CharField(max_length=200)),
                ("data", models.TextField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="log_entries",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ("-timestamp",),
            },
        ),
    ]
